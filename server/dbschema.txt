-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.allergies (
  allergy_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid NOT NULL,
  allergen character varying,
  reaction_type character varying,
  severity character varying CHECK (severity::text = ANY (ARRAY['mild'::character varying, 'moderate'::character varying, 'severe'::character varying, 'life_threatening'::character varying]::text[])),
  date_identified date,
  notes text,
  recorded_by uuid,
  recorded_at timestamp with time zone DEFAULT now(),
  CONSTRAINT allergies_pkey PRIMARY KEY (allergy_id),
  CONSTRAINT allergies_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id),
  CONSTRAINT allergies_recorded_by_fkey FOREIGN KEY (recorded_by) REFERENCES public.users(user_id)
);
CREATE TABLE public.anthropometric_measurements (
  am_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid NOT NULL,
  weight numeric,
  height numeric,
  head_circumference numeric,
  chest_circumference numeric,
  abdominal_circumference numeric,
  measurement_date date DEFAULT CURRENT_DATE,
  recorded_by uuid,
  recorded_at timestamp with time zone DEFAULT now(),
  CONSTRAINT anthropometric_measurements_pkey PRIMARY KEY (am_id),
  CONSTRAINT anthropometric_measurements_recorded_by_fkey FOREIGN KEY (recorded_by) REFERENCES public.users(user_id),
  CONSTRAINT anthropometric_measurements_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id)
);
CREATE TABLE public.appointments (
  appointment_id bigint NOT NULL DEFAULT nextval('appointments_appointment_id_seq'::regclass),
  patient_id uuid NOT NULL,
  facility_id uuid NOT NULL,
  doctor_id uuid NOT NULL,
  scheduled_by uuid NOT NULL,
  appointment_date timestamp with time zone NOT NULL,
  status character varying DEFAULT 'scheduled'::character varying CHECK (status::text = ANY (ARRAY['scheduled'::character varying, 'confirmed'::character varying, 'cancelled'::character varying, 'completed'::character varying, 'no_show'::character varying]::text[])),
  reason text,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT appointments_pkey PRIMARY KEY (appointment_id),
  CONSTRAINT appointments_facility_id_fkey FOREIGN KEY (facility_id) REFERENCES public.healthcare_facilities(facility_id),
  CONSTRAINT appointments_scheduled_by_fkey FOREIGN KEY (scheduled_by) REFERENCES public.users(user_id),
  CONSTRAINT appointments_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.users(user_id),
  CONSTRAINT appointments_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id)
);
CREATE TABLE public.audit_logs (
  log_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  action_type character varying NOT NULL CHECK (action_type::text = ANY (ARRAY['CREATE'::character varying, 'UPDATE'::character varying, 'DELETE'::character varying, 'VIEW'::character varying]::text[])),
  table_name character varying NOT NULL,
  record_id uuid NOT NULL DEFAULT gen_random_uuid(),
  patient_id uuid,
  action_timestamp timestamp with time zone NOT NULL DEFAULT now(),
  ip_address inet,
  old_values jsonb,
  new_values jsonb,
  session_id text,
  CONSTRAINT audit_logs_pkey PRIMARY KEY (log_id),
  CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id)
);
CREATE TABLE public.consultation_types (
  type_id smallint GENERATED ALWAYS AS IDENTITY NOT NULL,
  type_name character varying NOT NULL,
  description text,
  CONSTRAINT consultation_types_pkey PRIMARY KEY (type_id)
);
CREATE TABLE public.delivery_record (
  delivery_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid,
  type_of_delivery character varying,
  apgar_score numeric CHECK (apgar_score >= 0::numeric AND apgar_score <= 10::numeric),
  mother_blood_type character varying,
  father_blood_type character varying,
  patient_blood_type character varying,
  distinguishable_marks text,
  vitamin_k_date date,
  vitamin_k_location character varying,
  hepatitis_b_date date,
  hepatitis_b_location character varying,
  bcg_vaccination_date date,
  bcg_vaccination_location character varying,
  other_medications text,
  discharge_diagnosis text,
  follow_up_visit_date date,
  follow_up_visit_site character varying,
  obstetrician uuid,
  pediatrician uuid,
  CONSTRAINT delivery_record_pkey PRIMARY KEY (delivery_id),
  CONSTRAINT delivery_record_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id),
  CONSTRAINT delivery_record_pediatrician_fkey FOREIGN KEY (pediatrician) REFERENCES public.users(user_id),
  CONSTRAINT delivery_record_obstetrician_fkey FOREIGN KEY (obstetrician) REFERENCES public.users(user_id)
);
CREATE TABLE public.facility_users (
  facility_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role character varying NOT NULL CHECK (role::text = ANY (ARRAY['doctor'::character varying::text, 'nurse'::character varying::text, 'admin'::character varying::text, 'staff'::character varying::text, 'facility_admin'::character varying::text])),
  start_date date DEFAULT CURRENT_DATE,
  end_date date,
  assigned_by uuid NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT facility_users_pkey PRIMARY KEY (facility_id, user_id),
  CONSTRAINT facility_users_facility_id_fkey FOREIGN KEY (facility_id) REFERENCES public.healthcare_facilities(facility_id),
  CONSTRAINT facility_users_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id),
  CONSTRAINT facility_users_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES public.users(user_id)
);
CREATE TABLE public.growth_milestones (
  milestone_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid NOT NULL,
  milestone_type character varying NOT NULL,
  milestone_date date NOT NULL,
  description text,
  notes text,
  recorded_by uuid NOT NULL,
  recorded_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT growth_milestones_pkey PRIMARY KEY (milestone_id),
  CONSTRAINT growth_milestones_recorded_by_fkey FOREIGN KEY (recorded_by) REFERENCES public.users(user_id),
  CONSTRAINT growth_milestones_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id)
);
CREATE TABLE public.healthcare_facilities (
  facility_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  facility_name character varying NOT NULL,
  address text NOT NULL,
  city character varying NOT NULL,
  zip_code character varying NOT NULL,
  contact_number character varying NOT NULL,
  email character varying NOT NULL,
  website character varying,
  subscription_status character varying DEFAULT 'active'::character varying CHECK (subscription_status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'suspended'::character varying]::text[])),
  subscription_expires date,
  created_at timestamp with time zone DEFAULT now(),
  created_by uuid NOT NULL,
  type text NOT NULL DEFAULT 'clinic'::text,
  plan text NOT NULL DEFAULT 'standard'::text,
  deleted_at timestamp with time zone,
  CONSTRAINT healthcare_facilities_pkey PRIMARY KEY (facility_id),
  CONSTRAINT healthcare_facilities_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(user_id)
);
CREATE TABLE public.invite_tokens (
  inv_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  email character varying NOT NULL,
  child_id uuid,
  token text NOT NULL UNIQUE,
  expires_at timestamp with time zone NOT NULL CHECK (expires_at > now()),
  invited_by uuid NOT NULL,
  consumed_at timestamp with time zone,
  facility_id uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'accepted'::character varying, 'expired'::character varying, 'cancelled'::character varying]::text[])),
  CONSTRAINT invite_tokens_pkey PRIMARY KEY (inv_id),
  CONSTRAINT invite_tokens_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES public.users(user_id),
  CONSTRAINT invite_tokens_child_id_fkey FOREIGN KEY (child_id) REFERENCES public.patients(patient_id),
  CONSTRAINT invite_tokens_facility_id_fkey FOREIGN KEY (facility_id) REFERENCES public.healthcare_facilities(facility_id)
);
CREATE TABLE public.medical_visits (
  visit_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid NOT NULL,
  facility_id uuid NOT NULL,
  doctor_id uuid NOT NULL,
  visit_date date NOT NULL,
  visit_type text NOT NULL,
  diagnosis text,
  treatment_plan text,
  follow_up_date timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid NOT NULL,
  updated_at timestamp with time zone DEFAULT now(),
  updated_by uuid,
  CONSTRAINT medical_visits_pkey PRIMARY KEY (visit_id),
  CONSTRAINT medical_visits_facility_id_fkey FOREIGN KEY (facility_id) REFERENCES public.healthcare_facilities(facility_id),
  CONSTRAINT medical_visits_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id),
  CONSTRAINT medical_visits_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.users(user_id),
  CONSTRAINT medical_visits_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(user_id),
  CONSTRAINT medical_visits_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.users(user_id)
);
CREATE TABLE public.parent_access (
  access_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid NOT NULL,
  user_id uuid NOT NULL,
  relationship character varying CHECK (relationship::text = ANY (ARRAY['parent'::character varying, 'guardian'::character varying, 'caregiver'::character varying, 'family_member'::character varying]::text[])),
  granted_by uuid,
  granted_at date DEFAULT CURRENT_DATE,
  revoked_at date,
  is_active boolean NOT NULL DEFAULT true,
  CONSTRAINT parent_access_pkey PRIMARY KEY (access_id),
  CONSTRAINT parent_access_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id),
  CONSTRAINT parent_access_granted_by_fkey FOREIGN KEY (granted_by) REFERENCES public.users(user_id),
  CONSTRAINT parent_access_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id)
);
CREATE TABLE public.patient_facility (
  pf_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid NOT NULL,
  facility_id uuid NOT NULL,
  assigned_by uuid NOT NULL,
  assigned_at timestamp with time zone DEFAULT now(),
  notes text,
  is_active boolean DEFAULT true,
  CONSTRAINT patient_facility_pkey PRIMARY KEY (pf_id),
  CONSTRAINT patient_facility_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES public.users(user_id),
  CONSTRAINT patient_facility_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id),
  CONSTRAINT patient_facility_facility_id_fkey FOREIGN KEY (facility_id) REFERENCES public.healthcare_facilities(facility_id)
);
CREATE TABLE public.patients (
  patient_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  firstname character varying NOT NULL,
  lastname character varying NOT NULL,
  date_of_birth date NOT NULL,
  sex character varying NOT NULL CHECK (sex::text = ANY (ARRAY['male'::character varying, 'female'::character varying, 'other'::character varying]::text[])),
  birth_weight numeric,
  birth_height numeric,
  bloodtype character varying,
  gestation_weeks smallint CHECK (gestation_weeks > 0 AND gestation_weeks <= 50),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean NOT NULL DEFAULT true,
  created_by uuid NOT NULL,
  CONSTRAINT patients_pkey PRIMARY KEY (patient_id),
  CONSTRAINT patients_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(user_id)
);
CREATE TABLE public.prescription_medications (
  pm_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  rx_id uuid NOT NULL,
  medication_name character varying NOT NULL,
  dosage character varying NOT NULL,
  frequency character varying NOT NULL,
  duration character varying,
  quantity character varying,
  refills_authorized smallint DEFAULT 0 CHECK (refills_authorized >= 0),
  special_instructions text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT prescription_medications_pkey PRIMARY KEY (pm_id),
  CONSTRAINT prescription_medications_rx_id_fkey FOREIGN KEY (rx_id) REFERENCES public.prescriptions(rx_id)
);
CREATE TABLE public.prescriptions (
  rx_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid NOT NULL,
  visit_id uuid,
  doctor_id uuid NOT NULL,
  facility_id uuid NOT NULL,
  consultation_type smallint NOT NULL CHECK (consultation_type >= 1 AND consultation_type <= 10),
  prescription_date date NOT NULL DEFAULT CURRENT_DATE,
  patient_age_at_time smallint NOT NULL CHECK (patient_age_at_time >= 0 AND patient_age_at_time <= 150),
  findings text NOT NULL,
  consultation_notes text,
  doctor_instructions text NOT NULL,
  return_date date,
  status character varying DEFAULT 'active'::character varying CHECK (status::text = ANY (ARRAY['active'::character varying::text, 'completed'::character varying::text, 'cancelled'::character varying::text, 'expired'::character varying::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  created_by uuid NOT NULL,
  updated_by uuid,
  CONSTRAINT prescriptions_pkey PRIMARY KEY (rx_id),
  CONSTRAINT prescriptions_consultation_type_fkey FOREIGN KEY (consultation_type) REFERENCES public.consultation_types(type_id),
  CONSTRAINT prescriptions_doctor_id_fkey FOREIGN KEY (doctor_id) REFERENCES public.users(user_id),
  CONSTRAINT prescriptions_facility_id_fkey FOREIGN KEY (facility_id) REFERENCES public.healthcare_facilities(facility_id),
  CONSTRAINT prescriptions_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(user_id),
  CONSTRAINT prescriptions_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.users(user_id),
  CONSTRAINT prescriptions_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id),
  CONSTRAINT prescriptions_visit_id_fkey FOREIGN KEY (visit_id) REFERENCES public.medical_visits(visit_id)
);
CREATE TABLE public.qr_codes (
  qr_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  reference_type character varying NOT NULL CHECK (reference_type::text = ANY (ARRAY['patient'::character varying, 'visit'::character varying, 'appointment'::character varying, 'vaccination'::character varying]::text[])),
  reference_id uuid NOT NULL,
  generated_by uuid,
  generated_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  access_count integer DEFAULT 0,
  last_accessed_at timestamp with time zone,
  is_active boolean DEFAULT true,
  CONSTRAINT qr_codes_pkey PRIMARY KEY (qr_id),
  CONSTRAINT qr_codes_generated_by_fkey FOREIGN KEY (generated_by) REFERENCES public.users(user_id)
);
CREATE TABLE public.screening_tests (
  st_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid NOT NULL,
  ens_date date,
  ens_remarks boolean,
  nhs_date date,
  nhs_right_ear boolean,
  nhs_left_ear boolean,
  pos_date date,
  pos_for_cchd_right boolean,
  pos_for_cchd_left boolean,
  ror_date date,
  ror_remarks character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT screening_tests_pkey PRIMARY KEY (st_id),
  CONSTRAINT screening_tests_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id)
);
CREATE TABLE public.users (
  user_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  email character varying NOT NULL UNIQUE,
  password text NOT NULL,
  firstname character varying NOT NULL,
  lastname character varying NOT NULL,
  role character varying NOT NULL CHECK (role::text = ANY (ARRAY['doctor'::character varying, 'nurse'::character varying, 'admin'::character varying, 'facility_admin'::character varying, 'parent'::character varying, 'guardian'::character varying]::text[])),
  specialty character varying,
  license_number character varying,
  phone_number character varying,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  is_active boolean DEFAULT false,
  is_subscribed boolean DEFAULT false,
  subscription_expires date CHECK (subscription_expires IS NULL OR subscription_expires > '2020-01-01'::date),
  last_sign_in_at timestamp with time zone,
  CONSTRAINT users_pkey PRIMARY KEY (user_id)
);
CREATE TABLE public.vaccinations (
  vax_id uuid NOT NULL DEFAULT uuid_generate_v4(),
  patient_id uuid NOT NULL,
  visit_id uuid,
  vaccine_name character varying,
  dose_number smallint CHECK (dose_number > 0),
  administered_date timestamp with time zone,
  administered_by uuid,
  manufacturer character varying,
  lot_number character varying,
  administration_site character varying,
  next_dose_due date,
  notes text,
  recorded_at timestamp with time zone DEFAULT now(),
  CONSTRAINT vaccinations_pkey PRIMARY KEY (vax_id),
  CONSTRAINT vaccinations_administered_by_fkey FOREIGN KEY (administered_by) REFERENCES public.users(user_id),
  CONSTRAINT vaccinations_visit_id_fkey FOREIGN KEY (visit_id) REFERENCES public.medical_visits(visit_id),
  CONSTRAINT vaccinations_patient_id_fkey FOREIGN KEY (patient_id) REFERENCES public.patients(patient_id)
);